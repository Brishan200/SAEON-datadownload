shiny::runApp()
library(shiny)
library(shinyjs)
library(leaflet)
library(sf)
library(tidyverse)
library(httr)
runApp()
library(jsonlite)
library(progress)
library(rsconnect)
getDatasets = function() {
url = "https://observationsapi.saeon.ac.za/api/Datasets"
token = Sys.getenv("ObsDBToken")
if (token=='') stop("ObsDBToken not found")
auth = paste('Bearer',token,sep = " ")
resp = GET(url, add_headers('Authorization'=auth))
stop_for_status(resp,task = "get datasets")
respType = http_type(resp)
if (respType != "application/json") stop("Incorrect response type: "+respType)
data = fromJSON(content(resp,as="text"))
data <- data %>%
tidyr::unite(col="obs_type_code", phenomenonCode,offeringCode,unitCode,sep="_",remove = FALSE) %>%
tidyr::unite(col="description", phenomenonName,offeringName,unitName,sep=" - ",remove = FALSE)
data <- data %>%
dplyr::select(-c('phenomenonCode','offeringCode','unitCode'))
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
data <- sf::st_as_sf(x = data,
coords = c("longitudeEast", "latitudeNorth"),
crs = projcrs)
sf::st_agr(data) = "constant"
return(data)
}
getObservations = function(datasetId,startDate = NULL,endDate=NULL) {
if (is.null(datasetId) | datasetId == "") stop("datasetId is required")
url = paste("https://observationsapi.saeon.ac.za/api/Datasets/",datasetId,"/Observations",sep = "")
token = Sys.getenv("ObsDBToken")
if (token=='') stop("ObsDBToken not found")
auth = paste('Bearer',token,sep = " ")
if (!is.null(startDate)) {
startDate = format_ISO8601(as.POSIXct(startDate),precision = "ymdhms")
}
if (!is.null(endDate)) {
endDate = format_ISO8601(as.POSIXct(endDate),precision = "ymdhms")
}
if (is.null(startDate) && is.null(endDate)) {
resp = GET(url, add_headers('Authorization'=auth))
}
else {
body = list(startDate=startDate,endDate=endDate)
resp = POST(url, add_headers('Authorization'=auth), body = body, encode = "json")
}
stop_for_status(resp,task = "get observations")
respType = http_type(resp)
if (respType != "application/json") stop("Incorrect response type: "+respType)
data = fromJSON(content(resp,as="text"))
return(data)
}
ui <- fluidPage(
titlePanel("SAEON Observations Data Download"),
useShinyjs(),
sidebarLayout(
sidebarPanel(
passwordInput("token", "Please Enter your SAEON observation token first:", placeholder = "Token..."),
actionButton("submit", "Submit"),
textOutput("submit_text"),
verbatimTextOutput("selectedPoints"),
shinyjs::hidden(dateInput("start_date", "Start Date:", value = Sys.Date())),
shinyjs::hidden(dateInput("end_date", "End Date:", value = Sys.Date())),
shinyjs::hidden(downloadButton("download_rdata", "Download .Rdata")),
shinyjs::hidden(downloadButton("download_csv", "Download .csv"))
),
mainPanel(
leafletOutput("SAEON_obs_map")
)
)
)
server <- function(input, output, session) {
session$setSessionTimeOut(28800)
selectedPoints <- reactiveValues(ids = NULL, selectedDates = NULL)
observeEvent(input$submit, {
token <- isolate(input$token)
Sys.setenv(ObsDBToken = token)
dataset <- getDatasets() %>%
#filter(description == "EOV - Sea Temperature - Subsurface - Actual - Degrees Celsius") %>%
mutate(stationName = sub(".+,(\\s*)", "", stationName))
output$SAEON_obs_map <- renderLeaflet({
leaflet(dataset) %>%
addTiles() %>%
addMarkers(label = ~paste("Site Name: ",stationName,"; ","Data description: ",phenomenonName),
labelOptions = labelOptions(noHide = FALSE,
direction = "auto",
style = list(whiteSpace = "pre-wrap")),
clusterOptions = markerClusterOptions(),
layerId = ~paste(stationName,phenomenonName, sep =", "))
})
output$submit_text <- renderText({
"\n Selects sites to download data and then the date range will appear. \n"
})
})
# Click event observer to select/deselect points
observeEvent(input$SAEON_obs_map_marker_click, {
selected_id <- input$SAEON_obs_map_marker_click$id
if (selected_id %in% selectedPoints$ids) {
# Deselect the point
selectedPoints$ids <- selectedPoints$ids[-which(selectedPoints$ids == selected_id)]
} else {
# Select the point
selectedPoints$ids <- c(selectedPoints$ids, selected_id)
}
# Update selectedDates based on the selected sites
dataset <- getDatasets() %>%
mutate(stationName = sub(".+,(\\s*)", "", stationName))
selectedPoints$selectedDates <- dataset %>%
filter(stationName %in% str_extract(selectedPoints$ids, "^[^,]+")) %>%
mutate(start_date = first(startDate), end_date = last(endDate))
# Enable/disable the "Download Data" button based on selection
if (length(selectedPoints$ids) > 0) {
shinyjs::show("start_date")
shinyjs::show("end_date")
shinyjs::show("download_rdata")
shinyjs::show("download_csv")
# Set the start and end dates to the selected dates
updateDateInput(session, "start_date", value = selectedPoints$selectedDates$start_date)
updateDateInput(session, "end_date", value = selectedPoints$selectedDates$end_date)
# Update the minimum and maximum dates allowed
updateDateInput(session, "start_date", min = selectedPoints$selectedDates$start_date, max = selectedPoints$selectedDates$end_date)
updateDateInput(session, "end_date", min = selectedPoints$selectedDates$start_date, max = selectedPoints$selectedDates$end_date)
} else {
shinyjs::hide("start_date")
shinyjs::hide("end_date")
shinyjs::hide("download_rdata")
shinyjs::hide("download_csv")
}
})
# Display the selected points
output$selectedPoints <- renderText({
paste0(selectedPoints$ids, "\n")
})
# Download Rdata action
output$download_rdata <- downloadHandler(
filename = function() {
paste("SAEON_data_downloaded", Sys.Date(), ".Rdata", sep = "")
},
content = function(file) {
downloadData(file, "Rdata")
}
)
# Download CSV action
output$download_csv <- downloadHandler(
filename = function() {
paste("SAEON_data_downloaded", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
downloadData(file, "CSV")
}
)
# Function to perform download logic
downloadData <- function(file, format) {
# Match selected points' data to the dataset and extract datasetid
dataset <- getDatasets() %>%
mutate(stationName = sub(".+,(\\s*)", "", stationName))
stationsselected <- str_extract(selectedPoints$ids,  "^[^,]+")
datatodownload <- dataset %>%
filter(stationName %in% stationsselected)
Download_data <- data.frame()
withProgress(
message = "Downloading Data",
detail = "Progress",
value = 0,
{
for (i in seq_along(datatodownload$id)) {
newdata <- getObservations(datatodownload$id[i],
startDate = input$start_date,
endDate = input$end_date)
Download_data <- bind_rows(Download_data, newdata)
incProgress(1 / length(datatodownload$id), detail = paste("Progress", i, "of", length(datatodownload$id)))
}
}
)
if (format == "Rdata") {
save(Download_data, file = file)
} else if (format == "CSV") {
write.csv(Download_data, file, row.names = FALSE)
}
}
}#End server
shinyApp(ui, server)
server <- function(input, output, session) {
selectedPoints <- reactiveValues(ids = NULL, selectedDates = NULL)
observeEvent(input$submit, {
token <- isolate(input$token)
Sys.setenv(ObsDBToken = token)
dataset <- getDatasets() %>%
#filter(description == "EOV - Sea Temperature - Subsurface - Actual - Degrees Celsius") %>%
mutate(stationName = sub(".+,(\\s*)", "", stationName))
output$SAEON_obs_map <- renderLeaflet({
leaflet(dataset) %>%
addTiles() %>%
addMarkers(label = ~paste("Site Name: ",stationName,"; ","Data description: ",phenomenonName),
labelOptions = labelOptions(noHide = FALSE,
direction = "auto",
style = list(whiteSpace = "pre-wrap")),
clusterOptions = markerClusterOptions(),
layerId = ~paste(stationName,phenomenonName, sep =", "))
})
output$submit_text <- renderText({
"\n Selects sites to download data and then the date range will appear. \n"
})
})
# Click event observer to select/deselect points
observeEvent(input$SAEON_obs_map_marker_click, {
selected_id <- input$SAEON_obs_map_marker_click$id
if (selected_id %in% selectedPoints$ids) {
# Deselect the point
selectedPoints$ids <- selectedPoints$ids[-which(selectedPoints$ids == selected_id)]
} else {
# Select the point
selectedPoints$ids <- c(selectedPoints$ids, selected_id)
}
# Update selectedDates based on the selected sites
dataset <- getDatasets() %>%
mutate(stationName = sub(".+,(\\s*)", "", stationName))
selectedPoints$selectedDates <- dataset %>%
filter(stationName %in% str_extract(selectedPoints$ids, "^[^,]+")) %>%
mutate(start_date = first(startDate), end_date = last(endDate))
# Enable/disable the "Download Data" button based on selection
if (length(selectedPoints$ids) > 0) {
shinyjs::show("start_date")
shinyjs::show("end_date")
shinyjs::show("download_rdata")
shinyjs::show("download_csv")
# Set the start and end dates to the selected dates
updateDateInput(session, "start_date", value = selectedPoints$selectedDates$start_date)
updateDateInput(session, "end_date", value = selectedPoints$selectedDates$end_date)
# Update the minimum and maximum dates allowed
updateDateInput(session, "start_date", min = selectedPoints$selectedDates$start_date, max = selectedPoints$selectedDates$end_date)
updateDateInput(session, "end_date", min = selectedPoints$selectedDates$start_date, max = selectedPoints$selectedDates$end_date)
} else {
shinyjs::hide("start_date")
shinyjs::hide("end_date")
shinyjs::hide("download_rdata")
shinyjs::hide("download_csv")
}
})
# Display the selected points
output$selectedPoints <- renderText({
paste0(selectedPoints$ids, "\n")
})
# Download Rdata action
output$download_rdata <- downloadHandler(
filename = function() {
paste("SAEON_data_downloaded", Sys.Date(), ".Rdata", sep = "")
},
content = function(file) {
downloadData(file, "Rdata")
}
)
# Download CSV action
output$download_csv <- downloadHandler(
filename = function() {
paste("SAEON_data_downloaded", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
downloadData(file, "CSV")
}
)
# Function to perform download logic
downloadData <- function(file, format) {
# Match selected points' data to the dataset and extract datasetid
dataset <- getDatasets() %>%
mutate(stationName = sub(".+,(\\s*)", "", stationName))
stationsselected <- str_extract(selectedPoints$ids,  "^[^,]+")
datatodownload <- dataset %>%
filter(stationName %in% stationsselected)
Download_data <- data.frame()
withProgress(
message = "Downloading Data",
detail = "Progress",
value = 0,
{
for (i in seq_along(datatodownload$id)) {
newdata <- getObservations(datatodownload$id[i],
startDate = input$start_date,
endDate = input$end_date)
Download_data <- bind_rows(Download_data, newdata)
incProgress(1 / length(datatodownload$id), detail = paste("Progress", i, "of", length(datatodownload$id)))
}
}
)
if (format == "Rdata") {
save(Download_data, file = file)
} else if (format == "CSV") {
write.csv(Download_data, file, row.names = FALSE)
}
}
}#End server
shinyApp(ui, server)
